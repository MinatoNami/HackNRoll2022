/* rawSend.ino Example sketch for IRLib2
 *  Illustrates how to send a code Using raw timings which were captured
 *  from the "rawRecv.ino" sample sketch.  Load that sketch and
 *  capture the values. They will print in the serial monitor. Then you
 *  cut and paste that output into the appropriate section below.
 */
#include <IRLibSendBase.h>    //We need the base code
#include <IRLib_HashRaw.h>    //Only use raw sender

IRsendRaw mySender;
const int buttonPinOn = 2;
const int buttonPinOff = 4;
int buttonStateOn = 0;         // variable for reading the pushbutton status
int buttonStateOff = 0;         // variable for reading the pushbutton status

void setup() {
  Serial.begin(9600);
  pinMode(buttonPinOn, INPUT);
  pinMode(buttonPinOff, INPUT);
}
/* Cut and paste the output from "rawRecv.ino" below here. It will 
 * consist of a #define RAW_DATA_LEN statement and an array definition
 * beginning with "uint16_t rawData[RAW_DATA_LEN]= {…" and concludes
 * with "…,1000};"
 */
#define RAW_DATA_LEN 400
uint16_t rawDataOff[RAW_DATA_LEN]={
  3374, 1814, 294, 1430, 362, 1358, 362, 482, 
  386, 482, 346, 526, 382, 1366, 274, 570, 
  382, 482, 382, 1366, 298, 1426, 362, 478, 
  298, 1454, 358, 482, 298, 570, 346, 1406, 
  274, 1450, 366, 482, 298, 1450, 346, 1382, 
  274, 574, 318, 550, 386, 1358, 362, 486, 
  294, 570, 382, 1366, 358, 482, 322, 546, 
  302, 566, 382, 482, 322, 554, 318, 546, 
  346, 526, 382, 486, 382, 482, 382, 482, 
  382, 482, 386, 482, 298, 570, 382, 482, 
  298, 570, 322, 546, 318, 550, 382, 482, 
  386, 478, 386, 482, 450, 430, 382, 482, 
  318, 558, 346, 526, 298, 566, 386, 482, 
  382, 1362, 362, 1362, 298, 546, 386, 482, 
  386, 482, 370, 1386, 362, 482, 382, 1362, 
  274, 574, 342, 522, 386, 482, 298, 570, 
  346, 522, 386, 482, 386, 1358, 298, 1430, 
  274, 570, 298, 1450, 362, 1358, 366, 474, 
  390, 482, 370, 1378, 322, 1406, 362, 482, 
  298, 1446, 362, 1362, 362, 1362, 278, 1446, 
  366, 482, 386, 1354, 366, 1358, 362, 482, 
  374, 502, 382, 482, 386, 478, 386, 478, 
  386, 478, 298, 574, 382, 482, 382, 482, 
  346, 522, 298, 570, 386, 478, 298, 574, 
  318, 554, 382, 482, 318, 554, 318, 550, 
  318, 550, 382, 482, 318, 550, 318, 550, 
  382, 482, 382, 482, 370, 498, 346, 522, 
  382, 486, 378, 494, 342, 530, 378, 486, 
  342, 522, 378, 490, 374, 490, 346, 526, 
  370, 498, 342, 526, 342, 526, 370, 494, 
  354, 514, 350, 522, 342, 522, 350, 538, 
  322, 542, 322, 546, 326, 542, 318, 550, 
  322, 542, 322, 542, 322, 546, 322, 542, 
  318, 550, 318, 546, 346, 522, 346, 526, 
  318, 550, 318, 550, 318, 1410, 314, 1410, 
  314, 554, 318, 546, 314, 1438, 286, 1438, 
  290, 1438, 286, 17254, 3390, 1846, 286, 1438, 
  286, 1438, 310, 554, 310, 562, 310, 558, 
  286, 1446, 306, 562, 282, 582, 310, 1442, 
  258, 1438, 282, 586, 282, 1466, 258, 586, 
  286, 578, 286, 1462, 234, 1490, 258, 586, 
  286, 1466, 258, 1466, 234, 630, 234, 634, 
  258, 1478, 234, 634, 262, 606, 234, 1490, 
  234, 630, 258, 610, 234, 634, 258, 610, 
  234, 630, 234, 638, 230, 658, 234, 622, 
  258, 634, 234, 638, 206, 658, 206, 658, 
  234, 634, 206, 658, 210, 662, 206, 662, 
  206, 658, 206, 658, 206, 686, 182, 658, 
  206, 690, 182, 682, 182, 690, 154, 710, 
  154, 710, 154, 714, 182, 1574, 122, 1000};



#define RAW_DATA_LEN 382
uint16_t rawDataOn[RAW_DATA_LEN]={
  3418, 1770, 398, 1326, 374, 1350, 374, 494, 
  398, 466, 322, 550, 398, 1326, 394, 474, 
  398, 466, 398, 1326, 398, 1322, 350, 518, 
  350, 1390, 398, 466, 398, 470, 350, 1378, 
  350, 1378, 398, 466, 398, 1330, 374, 1346, 
  374, 494, 374, 494, 374, 1354, 374, 490, 
  374, 490, 398, 1330, 346, 522, 394, 470, 
  326, 546, 394, 470, 394, 470, 326, 546, 
  326, 546, 394, 470, 326, 546, 398, 470, 
  346, 522, 394, 470, 346, 522, 394, 470, 
  322, 550, 394, 466, 326, 546, 350, 518, 
  430, 442, 326, 542, 326, 1398, 350, 518, 
  322, 546, 346, 522, 322, 542, 322, 550, 
  394, 1330, 322, 1402, 322, 546, 394, 474, 
  394, 474, 322, 1402, 394, 470, 322, 1410, 
  394, 474, 390, 474, 394, 470, 322, 546, 
  390, 478, 322, 542, 326, 1406, 390, 1334, 
  394, 470, 390, 1330, 322, 1414, 322, 546, 
  318, 550, 322, 1402, 390, 1334, 390, 474, 
  322, 1406, 390, 1330, 390, 1334, 322, 1406, 
  386, 482, 386, 1334, 366, 1358, 318, 550, 
  322, 550, 362, 506, 358, 506, 362, 506, 
  358, 506, 314, 550, 318, 558, 358, 510, 
  314, 554, 358, 510, 398, 478, 318, 550, 
  318, 562, 354, 510, 354, 510, 358, 514, 
  354, 486, 382, 482, 382, 482, 410, 454, 
  386, 482, 386, 478, 342, 530, 342, 522, 
  342, 530, 386, 490, 342, 530, 382, 482, 
  342, 522, 342, 526, 342, 526, 342, 526, 
  370, 502, 338, 530, 338, 554, 350, 510, 
  354, 514, 318, 554, 318, 546, 318, 550, 
  346, 518, 318, 546, 322, 546, 350, 518, 
  318, 546, 318, 550, 322, 542, 318, 546, 
  318, 550, 322, 546, 318, 550, 318, 550, 
  318, 550, 318, 550, 318, 1410, 318, 1406, 
  314, 554, 318, 546, 314, 566, 314, 550, 
  314, 562, 310, 17362, 3446, 1854, 286, 1438, 
  286, 1438, 306, 562, 306, 562, 286, 578, 
  286, 1442, 282, 582, 282, 582, 286, 1454, 
  282, 1442, 282, 586, 282, 1438, 262, 610, 
  258, 630, 238, 1466, 258, 1490, 258, 606, 
  262, 1462, 258, 1470, 234, 630, 234, 630, 
  234, 1490, 234, 634, 258, 610, 258, 1466, 
  234, 658, 230, 638, 210, 658, 206, 662, 
  210, 658, 206, 658, 210, 658, 206, 662, 
  206, 658, 234, 666, 154, 710, 154, 714, 
  154, 714, 178, 686, 182, 714, 126, 742, 
  154, 742, 122, 774, 78, 1000};


/*
 * Cut-and-paste into the area above.
 */
   
void loop() {
  buttonStateOn = digitalRead(buttonPinOn);
  buttonStateOff = digitalRead(buttonPinOff);
//  if (buttonStateOn == HIGH) {
//    mySender.send(rawDataOn,RAW_DATA_LEN,36);//Pass the buffer,length, optionally frequency
//    Serial.println(F("AC Switched On"));
//    delay(5000);
//  }
  if (buttonStateOff == HIGH) {
    mySender.send(rawDataOff,RAW_DATA_LEN,36);//Pass the buffer,length, optionally frequency
    Serial.println(F("AC Switched Off"));
    delay(5000);
  }
}
